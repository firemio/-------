import tomllib
# import json

def main():
    input_file = 'fan2310.txt'  # 入力ファイル名
    output_file = 'fan2310'  # 出力ファイル名

    with open(input_file, 'r', encoding='shift_jis') as file:
        lines = file.readlines()


    table = str.maketrans({
        '\u3000': '',
        ' ': '',
        '\t': ''
    })

    results = []
    for line in lines:
        result = {}
        start = 0
        for d in data:
            name = d[0]
            length = d[1]
            value = line[start:start+length]
            value = value.translate(table)			#全角スペース等を削除
            result[name] = value
            start += length
        results.append(result)


    split_dicts = list(split_list_of_dicts(results))

    # Writing each part to a separate file
    for i, part in enumerate(split_dicts):
        with open(f'{output_file}_{i+1}.txt', 'w', encoding='utf-8') as file:
            for d in part:
                file.write(str(d) + '\n')


# Function to split a list of dictionaries into 5 parts
def split_list_of_dicts(lst, n=5):
    k, m = divmod(len(lst), n)
    return (lst[i * k + min(i, m):(i + 1) * k + min(i + 1, m)] for i in range(n))


data = [
    ["登番", 4],
    ["名前漢字", 8],
    ["名前カナ", 15],
    ["支部", 2],
    ["級", 2],
    ["年号", 1],
    ["生年月日", 6],
    ["性別", 1],
    ["年齢", 2],
    ["身長", 3],
    ["体重", 2],
    ["血液型", 2],
    ["勝率", 4],
    ["複勝率", 4],
    ["1着回数", 3],
    ["2着回数", 3],
    ["出走回数", 3],
    ["優出回数", 2],
    ["優勝回数", 2],
    ["平均スタートタイミング", 3],
	####
    ["1コース進入回数", 3],
    ["1コース複勝率", 4],
    ["1コース平均スタートタイミング", 3],
    ["1コース平均スタート順位", 3],
    ["2コース進入回数", 3],
    ["2コース複勝率", 4],
    ["2コース平均スタートタイミング", 3],
    ["2コース平均スタート順位", 3],
    ["3コース進入回数", 3],
    ["3コース複勝率", 4],
    ["3コース平均スタートタイミング", 3],
    ["3コース平均スタート順位", 3],
    ["4コース進入回数", 3],
    ["4コース複勝率", 4],
    ["4コース平均スタートタイミング", 3],
    ["4コース平均スタート順位", 3],
    ["5コース進入回数", 3],
    ["5コース複勝率", 4],
    ["5コース平均スタートタイミング", 3],
    ["5コース平均スタート順位", 3],
    ["6コース進入回数", 3],
    ["6コース複勝率", 4],
    ["6コース平均スタートタイミング", 3],
    ["6コース平均スタート順位", 3],
    ["前期級", 2],
    ["前々期級", 2],
    ["前々々期級", 2], 
    ["前期能力指数", 4],
    ["今期能力指数", 4],
    ["年", 4],
    ["期", 1],
    ["算出期間(自)", 8],
    ["算出期間(至)", 8],
    ["養成期", 3],
    ["1コース1着回数", 3],
    ["1コース2着回数", 3],
    ["1コース3着回数", 3],
    ["1コース4着回数", 3],
    ["1コース5着回数", 3],
    ["1コース6着回数", 3],
    ["1コースF回数", 2],
    ["1コースL0回数", 2],
    ["1コースL1回数", 2],
    ["1コースK0回数", 2],
    ["1コースK1回数", 2],
    ["1コースS0回数", 2],
    ["1コースS1回数", 2],
    ["1コースS2回数", 2],
    ["2コース1着回数", 3],
    ["2コース2着回数", 3],
    ["2コース3着回数", 3],
    ["2コース4着回数", 3],
    ["2コース5着回数", 3],
    ["2コース6着回数", 3],
    ["2コースF回数", 2],
    ["2コースL0回数", 2],
    ["2コースL1回数", 2],
    ["2コースK0回数", 2],
    ["2コースK1回数", 2],
    ["2コースS0回数", 2],
    ["2コースS1回数", 2],
    ["2コースS2回数", 2],
    ["3コース1着回数", 3],
    ["3コース2着回数", 3],
    ["3コース3着回数", 3],
    ["3コース4着回数", 3],
    ["3コース5着回数", 3],
    ["3コース6着回数", 3],
    ["3コースF回数", 2],
    ["3コースL0回数", 2],
    ["3コースL1回数", 2],
    ["3コースK0回数", 2],
    ["3コースK1回数", 2],
    ["3コースS0回数", 2],
    ["3コースS1回数", 2],
    ["3コースS2回数", 2],
    ["4コース1着回数", 3],
    ["4コース2着回数", 3],
    ["4コース3着回数", 3],
    ["4コース4着回数", 3],
    ["4コース5着回数", 3],
    ["4コース6着回数", 3],
    ["4コースF回数", 2],
    ["4コースL0回数", 2],
    ["4コースL1回数", 2],
    ["4コースK0回数", 2],
    ["4コースK1回数", 2],
    ["4コースS0回数", 2],
    ["4コースS1回数", 2],
    ["4コースS2回数", 2],
    ["5コース1着回数", 3],
    ["5コース2着回数", 3],
    ["5コース3着回数", 3],
    ["5コース4着回数", 3],
    ["5コース5着回数", 3],
    ["5コース6着回数", 3],
    ["5コースF回数", 2],
    ["5コースL0回数", 2],
    ["5コースL1回数", 2],
    ["5コースK0回数", 2],
    ["5コースK1回数", 2],
    ["5コースS0回数", 2],
    ["5コースS1回数", 2],
    ["5コースS2回数", 2],
    ["6コース1着回数", 3],
    ["6コース2着回数", 3],
    ["6コース3着回数", 3],
    ["6コース4着回数", 3],
    ["6コース5着回数", 3],
    ["6コース6着回数", 3],
    ["6コースF回数", 2],
    ["6コースL0回数", 2],
    ["6コースL1回数", 2],
    ["6コースK0回数", 2],
    ["6コースK1回数", 2],
    ["6コースS0回数", 2],
    ["6コースS1回数", 2],
    ["6コースS2回数", 2],
    ["コースなしL0回数", 2],
    ["コースなしL1回数", 2],
    ["コースなしK0回数", 2],
    ["コースなしK1回数", 2],
    ["出身地", 3]
]

if __name__ == '__main__':
    main()
